# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-03-28 17:38+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: ../dgit.1:2 ../dgit.7:1
#, no-wrap
msgid "dgit"
msgstr ""

#. type: TH
#: ../dgit.1:2 ../dgit.7:1
#, no-wrap
msgid "Debian Project"
msgstr ""

#. type: =head1
#: ../dgit.1:3 ../dgit.7:2 ../dgit-user.7.pod:1 ../dgit-nmu-simple.7.pod:1
#: ../dgit-maint-native.7.pod:1 ../dgit-maint-merge.7.pod:1
#: ../dgit-maint-gbp.7.pod:1 ../dgit-maint-debrebase.7.pod:1
#: ../dgit-downstream-dsc.7.pod:1 ../dgit-sponsorship.7.pod:1
#: ../dgit-maint-bpo.7.pod:1 ../git-debrebase.1.pod:1 ../git-debrebase.5.pod:1
#: ../git-debpush.1.pod:1 ../tag2upload.5.pod:1
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: ../dgit.1:5
msgid "dgit - git integration with the Debian archive"
msgstr ""

#. type: =head1
#: ../dgit.1:6 ../git-debrebase.1.pod:5 ../git-debpush.1.pod:5
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: ../dgit.1:10
msgid ""
"B<dgit> [I<dgit-opts>] B<clone> [I<dgit-opts>] I<package> [I<suite>] [B<./"
">I<dir|>B</>I<dir>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:14
msgid "B<dgit> [I<dgit-opts>] B<fetch>|B<pull> [I<dgit-opts>] [I<suite>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:18
msgid ""
"B<dgit> [I<dgit-opts>] B<build>|B<sbuild>|B<build-source> [I<build-opts>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:22
msgid "B<dgit> [I<dgit-opts>] B<pbuilder>|B<cowbuilder> [I<debbuildopts>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:26
msgid ""
"B<dgit> [I<dgit-opts>] B<push-source>|B<push-built> [I<dgit-opts>] [I<suite>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:30
msgid ""
"B<dgit> [I<dgit-opts>] B<rpush-source>|B<rpush-built> I<build-"
"host>B<:>I<build-dir> [I<push args...>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:33
msgid "B<dgit> [I<dgit-opts>] I<action> ..."
msgstr ""

#. type: =head1
#: ../dgit.1:33 ../git-debpush.1.pod:9
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: ../dgit.1:41
msgid ""
"B<dgit> allows you to treat the Debian archive as if it were a git "
"repository.  Conversely, it allows Debian to publish the source of its "
"packages as git branches, in a format which is directly usable by ordinary "
"people."
msgstr ""

#. type: Plain text
#: ../dgit.1:44
msgid "This is the command line reference.  Please read the tutorial(s):"
msgstr ""

#. type: tbl table
#: ../dgit.1:46
#, no-wrap
msgid "dgit-user(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:46
#, no-wrap
msgid "for users: edit, build and share packages"
msgstr ""

#. type: tbl table
#: ../dgit.1:47
#, no-wrap
msgid "dgit-nmu-simple(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:47
#, no-wrap
msgid "for DDs: do a straightforward NMU"
msgstr ""

#. type: tbl table
#: ../dgit.1:48
#, no-wrap
msgid "dgit-maint-native(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:48
#, no-wrap
msgid "for maintainers of Debian-native packages"
msgstr ""

#. type: tbl table
#: ../dgit.1:49
#, no-wrap
msgid "dgit-maint-debrebase(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:49
#, no-wrap
msgid "for maintainers: a pure-git rebasish workflow"
msgstr ""

#. type: tbl table
#: ../dgit.1:50
#, no-wrap
msgid "dgit-maint-merge(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:50
#, no-wrap
msgid "for maintainers: a pure-git merging workflow"
msgstr ""

#. type: tbl table
#: ../dgit.1:51
#, no-wrap
msgid "dgit-maint-gbp(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:51
#, no-wrap
msgid "for maintainers already using git-buildpackage"
msgstr ""

#. type: tbl table
#: ../dgit.1:52
#, no-wrap
msgid "dgit-sponsorship(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:52
#, no-wrap
msgid "for sponsors and sponsored contributors"
msgstr ""

#. type: tbl table
#: ../dgit.1:53
#, no-wrap
msgid "dgit-downstream-dsc(7)"
msgstr ""

#. type: tbl table
#: ../dgit.1:53
#, no-wrap
msgid "setting up dgit push for a new distro"
msgstr ""

#. type: Plain text
#: ../dgit.1:60
msgid ""
"See B<dgit(7)> for detailed information about the data model, common "
"problems likely to arise with certain kinds of package, etc."
msgstr ""

#. type: SH
#: ../dgit.1:60
#, no-wrap
msgid "OPERATIONS"
msgstr ""

#. type: TP
#: ../dgit.1:61
#, no-wrap
msgid "B<dgit clone> I<package> [I<suite>] [B<./>I<dir|>B</>I<dir>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:74
msgid ""
"Consults the archive and dgit-repos to construct the git view of history for "
"I<package> in I<suite> (B<sid> by default)  in a new directory (named B<./"
">I<package> by default); also, downloads any necessary orig tarballs."
msgstr ""

#. type: Plain text
#: ../dgit.1:85
msgid ""
"The suite's git tip is left on the local branch B<dgit/>I<suite> ready for "
"work, and on the corresponding dgit remote tracking branch.  The B<origin> "
"remote will be set up to point to the package's dgit-repos tree for the "
"distro to which I<suite> belongs."
msgstr ""

#. type: Plain text
#: ../dgit.1:90
msgid ""
"I<suite> may be a combination of several underlying suites in the form "
"I<mainsuite>B<,>I<subsuite>...; see COMBINED SUITES in dgit(7)."
msgstr ""

#. type: Plain text
#: ../dgit.1:97
msgid ""
"For your convenience, the B<vcs-git> remote will be set up from the "
"package's Vcs-Git field, if there is one - but note that in the general case "
"the history found there may be different to or even disjoint from dgit's "
"view.  (See also dgit update-vcs-git.)"
msgstr ""

#. type: TP
#: ../dgit.1:97
#, no-wrap
msgid "B<dgit fetch> [I<suite>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:110
msgid ""
"Consults the archive and git-repos to update the git view of history for a "
"specific suite (and downloads any necessary orig tarballs), and updates the "
"remote tracking branch B<remotes/dgit/dgit/>I<suite>.  If the current branch "
"is B<dgit/>I<suite> then dgit fetch defaults to I<suite>; otherwise it "
"parses debian/changelog and uses the suite specified there.  suite may be a "
"combined suite, as for clone."
msgstr ""

#. type: TP
#: ../dgit.1:110
#, no-wrap
msgid "B<dgit pull> [I<suite>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:116
msgid ""
"Does dgit fetch, and then merges the new head of the remote tracking branch "
"B<remotes/dgit/dgit/>I<suite> into the current branch."
msgstr ""

#. type: TP
#: ../dgit.1:116
#, no-wrap
msgid "B<dgit checkout> I<suite>"
msgstr ""

#. type: Plain text
#: ../dgit.1:120
msgid "Checks out the local branch B<dgit/>I<suite>."
msgstr ""

#. type: Plain text
#: ../dgit.1:127
msgid ""
"If the branch does not exist, dgit checkout creates it, and sets it up the "
"same way as dgit clone would.  In that case, if the archive remote tracking "
"branch does not exist, dgit checkout will do a dgit fetch first."
msgstr ""

#. type: Plain text
#: ../dgit.1:132
msgid ""
"NB: dgit checkout will only do a fetch if it has to.  If you already have "
"the suite branch, and want to merge your branch with updates from the "
"archive, use dgit pull."
msgstr ""

#. type: Plain text
#: ../dgit.1:137
msgid ""
"dgit checkout will normally need to access the archive server, to "
"canonicalise the provided suite name.  The exception is if you specify the "
"canonical name, and the branch (or tracking branch) already exists."
msgstr ""

#. type: TP
#: ../dgit.1:137
#, no-wrap
msgid "B<dgit build> ..."
msgstr ""

#. type: Plain text
#: ../dgit.1:146
msgid ""
"Runs B<dpkg-buildpackage> with some suitable options.  Options and arguments "
"after build will be passed on to dpkg-buildpackage.  It is not necessary to "
"use dgit build when using dgit; it is OK to use any approach which ensures "
"that the generated source package corresponds to the relevant git commit."
msgstr ""

#. type: Plain text
#: ../dgit.1:148 ../dgit.1:196 ../dgit.1:236
msgid "Tagging, signing and actually uploading should be left to dgit push."
msgstr ""

#. type: Plain text
#: ../dgit.1:152
msgid ""
"dgit's build operations access the network, to get the -v option right.  See "
"-v, below."
msgstr ""

#. type: TP
#: ../dgit.1:152
#, no-wrap
msgid "B<dgit build-source> ..."
msgstr ""

#. type: Plain text
#: ../dgit.1:161
msgid ""
"Builds the source package, and a changes file for a prospective source-only "
"upload, using B<dpkg-source>.  The output is left in "
"I<package>B<_>I<version>B<.dsc> and "
"I<package>B<_>I<version>B<_source.changes>."
msgstr ""

#. type: Plain text
#: ../dgit.1:164
msgid ""
"Tagging, signing and actually uploading should be left to dgit push-source, "
"or dgit push."
msgstr ""

#. type: TP
#: ../dgit.1:164
#, no-wrap
msgid "B<dgit clean>"
msgstr ""

#. type: Plain text
#: ../dgit.1:168
msgid ""
"Cleans the current working tree (according to the --clean= option in force)."
msgstr ""

#. type: TP
#: ../dgit.1:168
#, no-wrap
msgid "B<dgit update-vcs-git> [I<suite>|B<.>] [B<-->] [I<git fetch options>]"
msgstr ""

#. type: TQ
#: ../dgit.1:170
#, no-wrap
msgid "B<dgit update-vcs-git> [I<suite|>B<.>] B<->"
msgstr ""

#. type: Plain text
#: ../dgit.1:175
msgid ""
"Sets up, or updates the url of, the vcs-git remote, and (unless B<-> was "
"specified)  runs git fetch on it."
msgstr ""

#. type: Plain text
#: ../dgit.1:182
msgid ""
"By default, the Vcs-Git field of the .dsc from Debian sid is used, as that "
"is probably most up to date.  Another suite may be specified, or B<.> to "
"indicate that the Vcs-Git of the cwd's debian/control should be used instead."
msgstr ""

#. type: TP
#: ../dgit.1:182
#, no-wrap
msgid "B<dgit help>"
msgstr ""

#. type: Plain text
#: ../dgit.1:185 ../dgit.1:1442
msgid "Print a usage summary."
msgstr ""

#. type: TP
#: ../dgit.1:185
#, no-wrap
msgid "B<dgit sbuild> ..."
msgstr ""

#. type: Plain text
#: ../dgit.1:194
msgid ""
"Constructs the source package, uses B<sbuild> to do a binary build, and uses "
"mergechanges to merge the source and binary changes files.  Options and "
"arguments after sbuild will be passed on to sbuild.  The output is left in "
"I<package>B<_>I<version>B<_multi.changes>."
msgstr ""

#. type: TP
#: ../dgit.1:196
#, no-wrap
msgid "B<dgit pbuilder> [I<debbuildopts>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:204
msgid ""
"Constructs the source package, uses B<pbuilder> to do a binary build, and "
"uses mergechanges to merge the source and binary changes files.  The output "
"is left in I<package>B<_>I<version>B<_multi.changes>."
msgstr ""

#. type: Plain text
#: ../dgit.1:207
msgid ""
"You should ensure that your dgit --build-products-dir setting matches your "
"pbuilder --buildresult."
msgstr ""

#. type: Plain text
#: ../dgit.1:213
msgid ""
"The I<debbuildopts> are passed to pbuilder using its --debbuildopts option.  "
"If you want to pass other options to pbuilder, use the B<--pbuilder:> dgit "
"option as described below (remember that dgit options should appear between "
"B<dgit> and B<pbuilder>)."
msgstr ""

#. type: Plain text
#: ../dgit.1:219
msgid ""
"You should ensure that in your pbuilderrc you do B<not> have the setting "
"B<SOURCE_ONLY_CHANGES=yes> as this may cause trouble."
msgstr ""

#. type: TP
#: ../dgit.1:219
#, no-wrap
msgid "B<dgit cowbuilder> [I<debbuildopts>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:225
msgid "Like B<dgit pbuilder>, but uses B<cowbuilder> instead of B<pbuilder.>"
msgstr ""

#. type: TP
#: ../dgit.1:225
#, no-wrap
msgid "B<dgit gbp-build> ..."
msgstr ""

#. type: Plain text
#: ../dgit.1:231
msgid ""
"Runs B<git-buildpackage> with some suitable options.  Options and arguments "
"after gbp-build will be passed on to git-buildpackage."
msgstr ""

#. type: Plain text
#: ../dgit.1:234
msgid ""
"By default this uses --quilt=gbp, so HEAD should be a git-buildpackage style "
"branch, not a patches-applied branch."
msgstr ""

#. type: TP
#: ../dgit.1:236
#, no-wrap
msgid "B<dgit push-source> [I<suite>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:241
msgid ""
"Does an `upload': sends the current HEAD to dgit-repos (as git commits), and "
"to the archive (as a source package, built by this command)."
msgstr ""

#. type: Plain text
#: ../dgit.1:245
msgid ""
"This is the usual way to upload to Debian.  It is like saying \"update the "
"source code in the archive to match my git HEAD, and let the autobuilders do "
"the rest.\""
msgstr ""

#. type: Plain text
#: ../dgit.1:256
msgid ""
"In more detail: dgit push-source builds a source package from HEAD.  It then "
"pushes the HEAD to the suite's dgit-repos branch, adjusts the .changes to "
"include any .origs which the archive lacks and exclude .origs which the "
"archive has (so -sa and -sd are not needed when building for dgit push), "
"makes a signed git tag, edits the .dsc to contain the dgit metadata field, "
"runs debsign to sign the upload (.dsc and .changes), pushes the signed tag, "
"and finally uses dput to upload the .changes to the archive."
msgstr ""

#. type: Plain text
#: ../dgit.1:260
msgid ""
"dgit push always uses the package, suite and version specified in the debian/"
"changelog and the .dsc, which must agree.  If the command line specifies a "
"suite then that must match too."
msgstr ""

#. type: Plain text
#: ../dgit.1:265
msgid ""
"When used on a git-debrebase branch, dgit calls git-debrebase to prepare the "
"branch for source package upload and push."
msgstr ""

#. type: Plain text
#: ../dgit.1:269
msgid ""
"With B<-C>, dgit push-source performs a dgit push-built, additionally "
"ensuring that no binary packages are uploaded."
msgstr ""

#. type: TP
#: ../dgit.1:269
#, no-wrap
msgid "B<dgit push-built> [I<suite>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:276
msgid ""
"Does an `upload' of a previously built package, possibly including "
"binaries.  Sends the current HEAD to dgit-repos (as git commits); and, sends "
"the previously built source package and binaries to the archive."
msgstr ""

#. type: Plain text
#: ../dgit.1:283
msgid ""
"The package must already have been built ready for upload, with the .dsc "
"and .changes left in the parent directory.  It is normally best to do the "
"build with dgit too (e.g. with dgit sbuild): some existing build tools pass "
"unhelpful options to dpkg-source et al by default, which can result in the "
"built source package not being identical to the git tree."
msgstr ""

#. type: Plain text
#: ../dgit.1:288
msgid ""
"dgit will check that the .dsc corresponds exactly to the current HEAD, "
"ensuring that all users, whether of the dgit git view, or of the traditional "
"archive, see the same source package."
msgstr ""

#. type: TP
#: ../dgit.1:288
#, no-wrap
msgid "B<dgit rpush-source>|B<rpush-built> I<build-host>B<:>I<src-dir> [I<push args...>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:295
msgid ""
"Pushes the contents of the specified directory on a remote machine.  This is "
"like running dgit push on build-host with src-dir as the current directory; "
"however, signing operations are done on the invoking host.  This allows you "
"to do a push when the system which has the source code (and any built "
"binaries) has no access to the key:"
msgstr ""

#. type: =item
#: ../dgit.1:298 ../dgit-maint-merge.7.pod:464
#, no-wrap
msgid "1."
msgstr ""

#. type: tbl table
#: ../dgit.1:298
#, no-wrap
msgid "Clone on build host (dgit clone)"
msgstr ""

#. type: =item
#: ../dgit.1:299 ../dgit-maint-merge.7.pod:468
#, no-wrap
msgid "2."
msgstr ""

#. type: tbl table
#: ../dgit.1:299
#, no-wrap
msgid "Edit code on build host (edit, git commit)"
msgstr ""

#. type: =item
#: ../dgit.1:300 ../dgit-maint-merge.7.pod:473
#, no-wrap
msgid "3."
msgstr ""

#. type: tbl table
#: ../dgit.1:300
#, no-wrap
msgid "Build package on build host (dgit build)"
msgstr ""

#. type: tbl table
#: ../dgit.1:301
#, no-wrap
msgid "4."
msgstr ""

#. type: tbl table
#: ../dgit.1:301
#, no-wrap
msgid "Test package on build host or elsewhere (dpkg -i, test)"
msgstr ""

#. type: tbl table
#: ../dgit.1:302
#, no-wrap
msgid "5."
msgstr ""

#. type: tbl table
#: ../dgit.1:302
#, no-wrap
msgid "Upload by invoking dgit rpush on host with your GPG key."
msgstr ""

#. type: Plain text
#: ../dgit.1:308
msgid ""
"However, the build-host must be able to ssh to the dgit repos.  If this is "
"not already the case, you must organise it separately, for example by the "
"use of ssh agent forwarding."
msgstr ""

#. type: Plain text
#: ../dgit.1:312
msgid ""
"The remaining arguments are treated just as dgit push-source or dgit push-"
"built would handle them."
msgstr ""

#. type: Plain text
#: ../dgit.1:317
msgid ""
"build-host and build-dir can be passed as separate arguments; this is "
"assumed to be the case if the first argument contains no : (except perhaps "
"one in [ ], to support IPv6 address literals)."
msgstr ""

#. type: Plain text
#: ../dgit.1:323
msgid ""
"You will need similar enough versions of dgit on the build-host and the "
"invocation host.  The build-host needs gnupg installed, with your public "
"key, and that of any sponsee, in its keyring (but not your private key, "
"obviously)."
msgstr ""

#. type: TP
#: ../dgit.1:323
#, no-wrap
msgid "B<dgit push>|B<rpush> I<...>"
msgstr ""

#. type: Plain text
#: ../dgit.1:334
msgid ""
"Configurable aliases for B<dgit push-built> and B<dgit rpush-built>.  These "
"aliases will in the future change to mean B<dgit push-source> and B<dgit "
"rpush-source>, and therefore they currently generate a warning."
msgstr ""

#. type: Plain text
#: ../dgit.1:338
msgid ""
"The behaviour of dgit push is controlled by the B<dgit.default.push-subcmd> "
"git config option:"
msgstr ""

#. type: tbl table
#: ../dgit.1:340
#, no-wrap
msgid "B<source>"
msgstr ""

#. type: tbl table
#: ../dgit.1:340
#, no-wrap
msgid "runs B<dgit push-source>"
msgstr ""

#. type: tbl table
#: ../dgit.1:340
#, no-wrap
msgid "future default"
msgstr ""

#. type: tbl table
#: ../dgit.1:341
#, no-wrap
msgid "B<built>"
msgstr ""

#. type: tbl table
#: ../dgit.1:341
#, no-wrap
msgid "and runs B<dgit push-built>"
msgstr ""

#. type: tbl table
#: ../dgit.1:342
#, no-wrap
msgid "B<built,warn>"
msgstr ""

#. type: tbl table
#: ../dgit.1:342
#, no-wrap
msgid "warns, and runs B<dgit push-built>"
msgstr ""

#. type: tbl table
#: ../dgit.1:342
#, no-wrap
msgid "current default"
msgstr ""

#. type: tbl table
#: ../dgit.1:343
#, no-wrap
msgid "B<reject>"
msgstr ""

#. type: tbl table
#: ../dgit.1:343
#, no-wrap
msgid "fails"
msgstr ""

#. type: Plain text
#: ../dgit.1:354
msgid ""
"For dgit rpush, the behaviour is controlled by B<dgit.default.rpush-subcmd>, "
"falling back to B<dgit.default.push-subcmd> if that is not set.  Because "
"dgit rpush is not typically run in a git working tree, only global git "
"config options (and B<-c> command line options) are relevant."
msgstr ""

#. type: Plain text
#: ../dgit.1:364
msgid ""
"These settings can safely be passed to older dgit (via B<-c);> the value "
"B<built> will be supported indefinitely.  This should be used in scripts "
"that need to work with both old versions of dgit (that don't have B<push-"
"built>)  and new versions (where B<push-source> is the default)."
msgstr ""

#. type: TP
#: ../dgit.1:364
#, no-wrap
msgid "B<dgit setup-new-tree>"
msgstr ""

#. type: Plain text
#: ../dgit.1:380
msgid ""
"Configure the current working tree the way that dgit clone would have set it "
"up.  Like running B<dgit setup-useremail>, B<setup-mergechangelogs> and "
"B<setup-gitattributes> (but only does each thing if dgit is configured to do "
"it automatically).  You can use these in any git repository, not just ones "
"used with the other dgit operations.  Does B<not> run B<update-vcs-git> (as "
"that requires Debian packaging information)."
msgstr ""

#. type: TP
#: ../dgit.1:380
#, no-wrap
msgid "B<dgit setup-useremail>"
msgstr ""

#. type: Plain text
#: ../dgit.1:386
msgid ""
"Set the working tree's user.name and user.email from the distro-specific "
"dgit configuration (B<dgit-distro.>I<distro>B<.user-name> and B<.user-"
"email>), or DEBFULLNAME or DEBEMAIL."
msgstr ""

#. type: TP
#: ../dgit.1:386
#, no-wrap
msgid "B<dgit setup-mergechangelogs>"
msgstr ""

#. type: Plain text
#: ../dgit.1:392
msgid ""
"Configures a git merge helper for the file B<debian/changelog> which uses "
"B<dpkg-mergechangelogs>."
msgstr ""

#. type: TP
#: ../dgit.1:392
#, no-wrap
msgid "B<dgit setup-gitattributes>"
msgstr ""

#. type: Plain text
#: ../dgit.1:407
msgid ""
"Set up the working tree's B<.git/info/attributes> to disable all "
"transforming attributes for all files.  This is done by defining a macro "
"attribute, B<dgit-defuse-attrs,> and applying it to B<*>.  For why, see "
"B<GITATTRIBUTES> in B<dgit(7)>.  Note that only attributes affecting the "
"working tree are suppressed.  git-archive may remain exciting."
msgstr ""

#. type: Plain text
#: ../dgit.1:415
msgid ""
"If there is an existing macro attribute line B<[attr]dgit-defuse-attrs> "
"in .git/info/attributes, but it is insufficient, because it was made by an "
"earlier version of dgit and git has since introduced new transforming "
"attributes, this modifies the macro to disable the newer transformations."
msgstr ""

#. type: Plain text
#: ../dgit.1:426
msgid ""
"(If there is already a macro attribute line B<[attr]dgit-defuse-attrs> "
"in .git/info/attributes which does what dgit requires (whatever files it "
"effects), this operation does nothing further.  This fact can be used to "
"defeat or partially defeat dgit setup-gitattributes and hence dgit setup-new-"
"tree.)"
msgstr ""

#. type: TP
#: ../dgit.1:426
#, no-wrap
msgid "B<dgit quilt-fixup>"
msgstr ""

#. type: Plain text
#: ../dgit.1:433
msgid ""
"`3.0 (quilt)' format source packages need changes representing not only in-"
"tree but also as patches in debian/patches.  dgit quilt-fixup checks whether "
"this has been done; if not, dgit will make appropriate patches in debian/"
"patches and also commit the resulting changes to git."
msgstr ""

#. type: Plain text
#: ../dgit.1:435
msgid "This is normally done automatically by dgit build and dgit push."
msgstr ""

#. type: Plain text
#: ../dgit.1:441
msgid ""
"dgit will try to turn each relevant commit in your git history into a new "
"quilt patch.  dgit cannot convert nontrivial merges, or certain other kinds "
"of more exotic history.  If dgit can't find a suitable linearisation of your "
"history, by default it will fail, but you can ask it to generate a single "
"squashed patch instead."
msgstr ""

#. type: Plain text
#: ../dgit.1:450
msgid ""
"When used with a git-debrebase branch, dgit will ask git-debrebase to "
"prepare patches.  However, dgit can make patches in some situations where "
"git-debrebase fails, so dgit quilt-fixup can be useful in its own right.  To "
"always use dgit's own patch generator instead of git-debrebase make-patches, "
"pass --git-debrebase=true to dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:455
msgid "See B<FORMAT 3.0 (QUILT)> in B<dgit(7)>."
msgstr ""

#. type: TP
#: ../dgit.1:455
#, no-wrap
msgid "B<dgit import-dsc> [I<sub-options>] I<../path/to/.dsc> [B<+>|B<..>]branch"
msgstr ""

#. type: Plain text
#: ../dgit.1:461
msgid ""
"Import a Debian-format source package, specified by its .dsc, into git, the "
"way dgit fetch would do."
msgstr ""

#. type: Plain text
#: ../dgit.1:472
msgid ""
"This does about half the work of dgit fetch: it will convert the .dsc into a "
"new, orphan git branch.  Since dgit has no access to a corresponding source "
"package archive or knowledge of the history it does not consider whether "
"this version is newer than any previous import or corresponding git "
"branches; and it therefore does not make a pseudomerge to bind the import "
"into any existing git history."
msgstr ""

#. type: Plain text
#: ../dgit.1:482
msgid ""
"Because a .dsc can contain a Dgit field naming a git commit (which you might "
"not have), and specifying where to find that commit (and any history rewrite "
"table), import-dsc might need online access.  If this is a problem (or "
"dgit's efforts to find the commit fail), consider --no-chase-dsc-distro or --"
"force-import-dsc-with-dgit-field."
msgstr ""

#. type: Plain text
#: ../dgit.1:484
msgid "There is only one sub-option:"
msgstr ""

#. type: Plain text
#: ../dgit.1:490
msgid ""
"B<--require-valid-signature> causes dgit to insist that the signature on "
"the .dsc is valid (using the same criteria as dpkg-source -x).  Otherwise, "
"dgit tries to verify the signature but the outcome is reported only as "
"messages to stderr."
msgstr ""

#. type: Plain text
#: ../dgit.1:509
msgid ""
"If I<branch> is prefixed with B<+> then if it already exists, it will be "
"simply overwritten, no matter its existing contents.  If I<branch> is "
"prefixed with B<..> then if it already exists and dgit actually imports the "
"dsc (rather than simply reading the git commit out of the Dgit field), dgit "
"will make a pseudomerge so that the result is necessarily fast forward from "
"the existing branch.  Otherwise, if I<branch> already exists, dgit will stop "
"with an error message."
msgstr ""

#. type: Plain text
#: ../dgit.1:513
msgid "If I<branch> does not start with refs/, refs/heads/ is prepended."
msgstr ""

#. type: TP
#: ../dgit.1:513
#, no-wrap
msgid "B<dgit version>"
msgstr ""

#. type: Plain text
#: ../dgit.1:516
msgid "Prints version information and exits."
msgstr ""

#. type: TP
#: ../dgit.1:516
#, no-wrap
msgid "B<dgit clone-dgit-repos-server>I< destdir>"
msgstr ""

#. type: Plain text
#: ../dgit.1:520
msgid ""
"Tries to fetch a copy of the source code for the dgit-repos-server, as "
"actually being used on the dgit git server, as a git tree."
msgstr ""

#. type: TP
#: ../dgit.1:520
#, no-wrap
msgid "B<dgit print-dgit-repos-server-source-url>"
msgstr ""

#. type: Plain text
#: ../dgit.1:525
msgid ""
"Prints the url used by dgit clone-dgit-repos-server.  This is hopefully "
"suitable for use as a git remote url.  It may not be usable in a browser."
msgstr ""

#. type: TP
#: ../dgit.1:525
#, no-wrap
msgid "B<dgit print-dpkg-source-ignores>"
msgstr ""

#. type: Plain text
#: ../dgit.1:532
msgid ""
"Prints the -i and -I arguments which must be passed to dpkg-souce to cause "
"it to exclude exactly the .git directory and nothing else.  The separate "
"arguments are unquoted, separated by spaces, and do not contain spaces."
msgstr ""

#. type: TP
#: ../dgit.1:532
#, no-wrap
msgid "B<dgit print-unapplied-treeish>"
msgstr ""

#. type: Plain text
#: ../dgit.1:543
msgid ""
"Constructs a tree-ish approximating the patches-unapplied state of your 3.0 "
"(quilt) package, and prints the git object name to stdout.  This requires "
"appropriate .orig tarballs.  This tree object is identical to your .origs as "
"regards upstream files.  The contents of the debian subdirectory is not "
"interesting and should not be inspected; except that debian/patches will be "
"identical to your HEAD."
msgstr ""

#. type: Plain text
#: ../dgit.1:550
msgid ""
"To make this operate off-line, the access configuration key which is used to "
"determine the build-products-dir is the uncanonicalised version of the suite "
"name from the changelog, or (of course) dgit.default.build-products-dir.  "
"See ACCESS CONFIGURATION, below."
msgstr ""

#. type: Plain text
#: ../dgit.1:552
msgid "This function is primarily provided for the benefit of git-debrebase."
msgstr ""

#. type: =head1
#: ../dgit.1:552 ../git-debrebase.1.pod:473
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: TP
#: ../dgit.1:553
#, no-wrap
msgid "B<-k>I<keyid>"
msgstr ""

#. type: Plain text
#: ../dgit.1:562
msgid ""
"Use I<keyid> for signing the tag and the upload.  The default comes from the "
"distro's B<keyid> config setting (see CONFIGURATION, below), or failing "
"that, the uploader trailer line in debian/changelog."
msgstr ""

#. type: TP
#: ../dgit.1:562
#, no-wrap
msgid "B<--no-sign>"
msgstr ""

#. type: Plain text
#: ../dgit.1:565
msgid "does not sign tags or uploads (meaningful only with push)."
msgstr ""

#. type: TP
#: ../dgit.1:566
#, no-wrap
msgid "B<-p>I<package>"
msgstr ""

#. type: Plain text
#: ../dgit.1:570
msgid "Specifies that we should process source package I<package>."
msgstr ""

#. type: Plain text
#: ../dgit.1:574
msgid ""
"For dgit fetch and dgit pull, uses this value rather than looking in debian/"
"control or debian/changelog."
msgstr ""

#. type: Plain text
#: ../dgit.1:579
msgid ""
"For dgit rpush, specifies that the invoking host should be willing to sign "
"only a .dsc or .changes file for the source package I<package>."
msgstr ""

#. type: TP
#: ../dgit.1:579
#, no-wrap
msgid "B<--clean=git> | B<-wg>"
msgstr ""

#. type: Plain text
#: ../dgit.1:585
msgid ""
"Use B<git clean -xdf> to clean the working tree, rather than running the "
"package's rules clean target."
msgstr ""

#. type: Plain text
#: ../dgit.1:588
msgid ""
"This will delete all files which are not tracked by git.  (Including any "
"files you forgot to git add.)"
msgstr ""

#. type: Plain text
#: ../dgit.1:593
msgid ""
"B<--clean=>I<...> options other than dpkg-source are useful when the "
"package's clean target is troublesome, or to avoid needing the build-"
"dependencies."
msgstr ""

#. type: Plain text
#: ../dgit.1:600
msgid ""
"dgit will only actually clean the tree if it needs to (because it needs to "
"build the source package or binaries from your working tree).  Otherwise it "
"will just check that there are no untracked unignored files.  See --"
"clean=git[-ff],always, below."
msgstr ""

#. type: TP
#: ../dgit.1:600
#, no-wrap
msgid "B<--clean=git-ff> | B<-wgf>"
msgstr ""

#. type: Plain text
#: ../dgit.1:609
msgid ""
"Use B<git clean -xdff> to clean the working tree.  Like git clean -xdf but "
"it also removes any subdirectories containing different git trees (which "
"only unusual packages are likely to create)."
msgstr ""

#. type: TP
#: ../dgit.1:609
#, no-wrap
msgid "B<--clean=git>[B<-ff>]B<,always> | B<-wga> | B<-wgfa>"
msgstr ""

#. type: Plain text
#: ../dgit.1:613
msgid ""
"Like --clean=git, but always does the clean and not just a check, deleting "
"any untracked un-ignored files."
msgstr ""

#. type: TP
#: ../dgit.1:613
#, no-wrap
msgid "B<--clean=check> | B<--clean=check,ignores> | B<-wc> | B<-wci>"
msgstr ""

#. type: Plain text
#: ../dgit.1:619
msgid ""
"Merely check that the tree is clean (does not contain uncommitted files).  "
"Avoids running rules clean, and can avoid needing the build-dependencies."
msgstr ""

#. type: Plain text
#: ../dgit.1:630
msgid ""
"With B<,ignores> or B<-wci>, untracked files covered by .gitignore are "
"tolerated, so only files which show up as B<?> in git status (ie, ones you "
"maybe forgot to git add)  are treated as a problem."
msgstr ""

#. type: TP
#: ../dgit.1:630
#, no-wrap
msgid "B<--clean=none> | B<-wn>"
msgstr ""

#. type: Plain text
#: ../dgit.1:638
msgid ""
"Do not clean the tree, nor check that it is clean.  Avoids running rules "
"clean, and can avoid needing the build-dependencies.  If there are files "
"which are not in git, or if the build creates such files, a subsequent dgit "
"push will fail."
msgstr ""

#. type: TP
#: ../dgit.1:638
#, no-wrap
msgid "B<--clean=dpkg-source>[B<-d>] | B<-wd> | B<-wdd>"
msgstr ""

#. type: Plain text
#: ../dgit.1:643
msgid ""
"Use dpkg-buildpackage to do the clean, so that the source package is cleaned "
"by dpkg-source running the package's clean target.  --clean=dpkg-source is "
"the default."
msgstr ""

#. type: Plain text
#: ../dgit.1:647
msgid "Without the extra B<d>, requires the package's build dependencies."
msgstr ""

#. type: Plain text
#: ../dgit.1:657
msgid ""
"With B<...>-d or B<-wdd>, the build-dependencies are not checked (due to "
"passing B<-d> to dpkg-buildpackage), which violates policy, but may work in "
"practice."
msgstr ""

#. type: Plain text
#: ../dgit.1:664
msgid ""
"The rules clean target will only be run if it is needed: when dgit is going "
"to build source or binary packages from your working tree, rather than from "
"your git branch (for example because of --include-dirty or because the "
"binary package build uses your working tree)."
msgstr ""

#. type: Plain text
#: ../dgit.1:674
msgid ""
"In all cases, dgit will check that there are (after rules clean, if "
"applicable) no untracked un-ignored files, in case these are files you "
"forgot to git add.  (Except that this check is not done for a `3.0 (quilt)' "
"package when dgit has to apply patches, dirtily, to the working tree.)  If "
"your package does not have a good .gitignore you will probably need --"
"clean=dpkg-source,no-check aka -wdn."
msgstr ""

#. type: TP
#: ../dgit.1:674
#, no-wrap
msgid "B<--clean=dpkg-source>[B<-d>]B<,no-check> | B<-wdn> | B<-wddn>"
msgstr ""

#. type: Plain text
#: ../dgit.1:678
msgid ""
"Like --clean=dpkg-source, but does not care about untracked un-ignored files."
msgstr ""

#. type: TP
#: ../dgit.1:678
#, no-wrap
msgid "B<--clean=dpkg-source>[B<-d>]B<,all-check> | B<-wda> | B<-wdda>"
msgstr ""

#. type: Plain text
#: ../dgit.1:683
msgid ""
"Like --clean=dpkg-source, but fails even on ignored untracked files.  This "
"could perhaps be used to detect bugs in your rules clean target."
msgstr ""

#. type: TP
#: ../dgit.1:683
#, no-wrap
msgid "B<-N> | B<--new>"
msgstr ""

#. type: Plain text
#: ../dgit.1:689
msgid ""
"The package is, or may be, new in this suite.  Without this, dgit will "
"refuse to push.  Needing --new is not unusual; for example, it is frequently "
"needed for uploading to Debian experimental."
msgstr ""

#. type: Plain text
#: ../dgit.1:695
msgid ""
"Note that dgit may be unable to access the git history for an entirely new "
"package which has not been accepted by the archive.  So for an entirely new "
"package you need to properly coordinate with anyone else who might upload."
msgstr ""

#. type: TP
#: ../dgit.1:695
#, no-wrap
msgid "B<--include-dirty>"
msgstr ""

#. type: Plain text
#: ../dgit.1:703
msgid ""
"Do not complain if the working tree does not match your git HEAD, and when "
"building, include the changes from your working tree.  This can be useful "
"with build, if you plan to commit later.  (dgit push will still ensure that "
"the .dsc you upload and the git tree you push are identical, so this option "
"won't make broken pushes.)"
msgstr ""

#. type: Plain text
#: ../dgit.1:715
msgid ""
"Note that this does B<not> prevent dgit from cleaning your tree, so if the "
"changes in your working tree are in the form of untracked files, those might "
"still be deleted, especially with --clean=git.  If you want to include "
"untracked files in the build, you can use --clean=none or --clean=dpkg-"
"source[-d] in addition to --include-dirty.  Note that this combination can "
"fail if the untracked files are under I<debian/patches/>."
msgstr ""

#. type: TP
#: ../dgit.1:715
#, no-wrap
msgid "B<--ignore-dirty>"
msgstr ""

#. type: Plain text
#: ../dgit.1:718
msgid "Deprecated alias for --include-dirty."
msgstr ""

#. type: TP
#: ../dgit.1:718
#, no-wrap
msgid "B<--collab-non-dgit>"
msgstr ""

#. type: Plain text
#: ../dgit.1:725
msgid ""
"Make B<dgit push>, behave more suitably for collaborating (using shared git "
"history)  with git-using co-developers who aren't using dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:731
msgid ""
"With this option, dgit won't mind that the git history you're using isn't "
"necessarily fast forward from the dgit view; instead, it will rely on the "
"changelog to prevent accidentally overwriting changes."
msgstr ""

#. type: Plain text
#: ../dgit.1:740
msgid ""
"And, the synthetic commits needed to make the dgit git history fast forward "
"will appear only on the dgit git server, and local dgit suite branches, not "
"on your own main branch.  So they won't end up in the maintainer-visible "
"history, when you push your own branch to make a merge request."
msgstr ""

#. type: Plain text
#: ../dgit.1:743
msgid "This is equivalent to B<--split-view=always --trust-changelog>."
msgstr ""

#. type: TP
#: ../dgit.1:743
#, no-wrap
msgid "B<--trust-changelog> | B<--overwrite>=I<previous-version>"
msgstr ""

#. type: Plain text
#: ../dgit.1:754
msgid ""
"Declare that your HEAD really does contain all the (wanted) changes from all "
"versions listed in its changelog; or, all (wanted) changes from I<previous-"
"version>.  This promise is needed when your git branch is not a descendant "
"of the version in the archive according to the git revision history."
msgstr ""

#. type: Plain text
#: ../dgit.1:760
msgid ""
"It is safer to specify B<--trust-changelog>, than B<--overwrite=>I<previous-"
"version>, and usually the latter is not needed."
msgstr ""

#. type: Plain text
#: ../dgit.1:767
msgid ""
"B<--trust-changelog> is useful if you are the maintainer, and you have "
"incorporated NMU changes into your own git workflow in a way that doesn't "
"make your branch a fast forward from the NMU.  It can also be useful when "
"there was an upload made without dgit since the most recent upload made with "
"dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:773
msgid ""
"It is also usually necessary the first time a package is pushed with dgit "
"push to a particular suite.  See B<dgit-maint->I<*>B<(7)>."
msgstr ""

#. type: Plain text
#: ../dgit.1:782
msgid ""
"With B<--trust-changelog> dgit will check that the version in the archive is "
"mentioned in your debian/changelog.  (This will avoid losing changes, unless "
"someone committed to git a finalised changelog entry, and then made later "
"changes to that version.)"
msgstr ""

#. type: Plain text
#: ../dgit.1:788
msgid ""
"With B<--overwrite=>I<previous-version> that version ought to be the version "
"currently in the archive, and it will be unconditionally overwritten, "
"regardless of what's in the changelog."
msgstr ""

#. type: Plain text
#: ../dgit.1:794
msgid ""
"These options will, if necessary, make a pseudo-merge (that is, something "
"that looks like the result of git merge -s ours) to stitch the archive's "
"version into your own git history, so that your push is a fast forward from "
"the archive."
msgstr ""

#. type: Plain text
#: ../dgit.1:801
msgid ""
"(In quilt mode B<gbp>, B<dpm>, B<unpatched> or B<baredebian>*, implying a "
"split between the dgit view and the maintainer view, the pseudo-merge will "
"appear only in the dgit view; B<--split-view=always> can be used to force "
"that behaviour, e.g. in other quilt modes.)"
msgstr ""

#. type: Plain text
#: ../dgit.1:805
msgid ""
"B<--overwrite> without a version number is an obsolete way of specifying B<--"
"trust-changelog>."
msgstr ""

#. type: TP
#: ../dgit.1:805
#, no-wrap
msgid "B<--delayed>=I<days>"
msgstr ""

#. type: Plain text
#: ../dgit.1:808
msgid "Upload to a DELAYED queue."
msgstr ""

#. type: Plain text
#: ../dgit.1:818
msgid ""
"B<WARNING:> If the maintainer responds by cancelling your upload from the "
"queue, and does not make an upload of their own, this will not rewind the "
"git branch on the dgit git server.  Other dgit users will then see your push "
"(with a warning message from dgit)  even though the maintainer wanted to "
"abolish it.  Such users might unwittingly reintroduce your changes."
msgstr ""

#. type: Plain text
#: ../dgit.1:823
msgid ""
"If this situation arises, someone should make a suitable dgit push to update "
"the contents of dgit-repos to a version without the controversial changes."
msgstr ""

#. type: TP
#: ../dgit.1:823
#, no-wrap
msgid "B<--no-chase-dsc-distro>"
msgstr ""

#. type: Plain text
#: ../dgit.1:829
msgid ""
"Tells dgit not to look online for additional git repositories containing "
"information about a particular .dsc being imported.  Chasing is the default."
msgstr ""

#. type: Plain text
#: ../dgit.1:839
msgid ""
"For most operations (such as fetch and pull), disabling chasing means dgit "
"will access only the git server for the distro you are directly working "
"with, even if the .dsc was copied verbatim from another distro.  For import-"
"dsc, disabling chasing means dgit will work completely offline."
msgstr ""

#. type: Plain text
#: ../dgit.1:847
msgid ""
"Disabling chasing can be hazardous: if the .dsc names a git commit which has "
"been rewritten by those in charge of the distro, this option may prevent "
"that rewrite from being effective.  Also, it can mean that dgit fails to "
"find necessary git commits."
msgstr ""

#. type: TP
#: ../dgit.1:847
#, no-wrap
msgid "B<--save-dgit-view=>I<branch>|I<ref>"
msgstr ""

#. type: Plain text
#: ../dgit.1:857
msgid ""
"Specifies that when split view is in operation, and dgit calculates (or "
"looks up in its cache)  a dgit view corresponding to your HEAD, the dgit "
"view will be left in I<ref>.  The specified ref is unconditionally "
"overwritten, so don't specify a branch you want to keep."
msgstr ""

#. type: Plain text
#: ../dgit.1:861
msgid ""
"This option is effective only with the following operations: quilt-fixup; "
"push; all builds.  And it is only effective when split view is actually in "
"operation."
msgstr ""

#. type: Plain text
#: ../dgit.1:865
msgid ""
"If ref does not start with refs/ it is taken to be a branch - i.e. refs/"
"heads/ is prepended."
msgstr ""

#. type: Plain text
#: ../dgit.1:869
msgid "B<--dgit-view-save> is a deprecated alias for --save-dgit-view."
msgstr ""

#. type: TP
#: ../dgit.1:869
#, no-wrap
msgid "B<--deliberately->I<something>"
msgstr ""

#. type: Plain text
#: ../dgit.1:883
msgid ""
"Declare that you are deliberately doing I<something>.  This can be used to "
"override safety catches, including safety catches which relate to distro-"
"specific policies.  The use of --deliberately is declared and published in "
"the signed tags generated for you by dgit, so that the archive software can "
"give effect to your intent, and for the benefit of humans looking at the "
"history.  The meanings of I<something>s understood in the context of Debian "
"are discussed below:"
msgstr ""

#. type: TP
#: ../dgit.1:883
#, no-wrap
msgid "B<--deliberately-not-fast-forward>"
msgstr ""

#. type: Plain text
#: ../dgit.1:889
msgid ""
"Declare that you are deliberately rewriting history.  This could be because "
"your branch is not fast forward from the dgit server history, or not fast "
"forward from a locally-synthesised dsc import."
msgstr ""

#. type: Plain text
#: ../dgit.1:895
msgid ""
"When pushing to Debian, use this only when you are making a renewed upload "
"of an entirely new source package whose previous version was not accepted "
"for release from NEW because of problems with copyright or "
"redistributibility; or, exceptionally, for the very first upload with dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:906
msgid ""
"When split view is in operation, this also prevents the construction by dgit "
"of a pseudomerge to make the dgit view fast forwarding.  Normally only one "
"of --trust-changelog (which creates a suitable pseudomerge)  and --"
"deliberately-not-fast-forward (which suppresses the pseudomerge and the fast "
"forward checks)  should be needed; --trust-changelog is usually better."
msgstr ""

#. type: TP
#: ../dgit.1:906
#, no-wrap
msgid "B<--deliberately-include-questionable-history>"
msgstr ""

#. type: Plain text
#: ../dgit.1:915
msgid ""
"Declare that you are deliberately including, in the git history of your "
"current push, history which contains a previously-submitted version of this "
"package which was not approved (or has not yet been approved) by the "
"ftpmasters.  When pushing to Debian, only use this option after verifying "
"that: none of the rejected-from-NEW (or never-accepted) versions in the git "
"history of your current push, were rejected by ftpmaster for copyright or "
"redistributability reasons."
msgstr ""

#. type: TP
#: ../dgit.1:915
#, no-wrap
msgid "B<--deliberately-fresh-repo>"
msgstr ""

#. type: Plain text
#: ../dgit.1:920
msgid ""
"Declare that you are deliberately rewriting history and want to throw away "
"the existing repo.  Not relevant when pushing to Debian, as the Debian "
"server will do this automatically when necessary."
msgstr ""

#. type: =item
#: ../dgit.1:920 ../git-debpush.1.pod:114
#, no-wrap
msgid "B<--quilt=linear>"
msgstr ""

#. type: Plain text
#: ../dgit.1:927
msgid ""
"With format `3.0 (quilt)', insist on a linear patch stack: one new patch for "
"each relevant commit.  If such a stack cannot be generated, fail.  This is "
"the default for Debian."
msgstr ""

#. type: Plain text
#: ../dgit.1:932
msgid ""
"HEAD should be a series of plain commits (not touching debian/patches/), and "
"pseudomerges, with as ancestor a patches-applied branch."
msgstr ""

#. type: TP
#: ../dgit.1:932
#, no-wrap
msgid "B<--quilt=try-linear>"
msgstr ""

#. type: Plain text
#: ../dgit.1:942
msgid ""
"With format `3.0 (quilt)', prefer a linear patch stack (as with --"
"quilt=linear)  but if that doesn't seem possible, try to generate a single "
"squashed patch for all the changes made in git (as with --quilt=smash).  "
"This is not a good idea for an NMU in Debian."
msgstr ""

#. type: =item
#: ../dgit.1:942 ../git-debpush.1.pod:120
#, no-wrap
msgid "B<--quilt=smash>"
msgstr ""

#. type: Plain text
#: ../dgit.1:948
msgid ""
"With format `3.0 (quilt)', assume patches-applied (as obtained from dgit "
"clone) and generate a single additional patch for all the changes made in "
"git.  This is not a good idea for an NMU in Debian."
msgstr ""

#. type: Plain text
#: ../dgit.1:954
msgid ""
"(If HEAD has any in-tree patches already, they must apply cleanly.  This "
"will be the case for any trees produced by dgit fetch or clone; if you do "
"not change the upstream version nor make changes in debian/patches, it will "
"remain true.)"
msgstr ""

#. type: TP
#: ../dgit.1:954
#, no-wrap
msgid "B<--quilt=single>"
msgstr ""

#. type: Plain text
#: ../dgit.1:961
msgid ""
"With format `3.0 (quilt)', assume patches-applied (as obtained from dgit "
"clone), delete all the existing patches, and then generate a single patch "
"for all the changes made in git.  This is not a good idea for an NMU in "
"Debian."
msgstr ""

#. type: Plain text
#: ../dgit.1:970
msgid ""
"Use this instead of the B<single-debian-patch> dpkg-source format option.  "
"That dpkg-source option cannot handle certain changes to the tree that dpkg-"
"source otherwise permits, and in some cases it can generate strange source "
"packages that dpkg-source appears to accept but which become corrupted when "
"people later try to modify them."
msgstr ""

#. type: =item
#: ../dgit.1:970 ../git-debpush.1.pod:131
#, no-wrap
msgid "B<--quilt=nofix>"
msgstr ""

#. type: Plain text
#: ../dgit.1:980
msgid ""
"With format `3.0 (quilt)', assume patches-applied (as obtained from dgit "
"clone), and check that the patch metadata is up to date.  If it isn't, fail; "
"you must then fix the metadata yourself somehow before pushing.  (NB that "
"dpkg-source --commit will not work because the dgit git tree does not have a "
"B<.pc> directory.)"
msgstr ""

#. type: TP
#: ../dgit.1:980
#, no-wrap
msgid "B<--quilt=nocheck> | B<--no-quilt-fixup>"
msgstr ""

#. type: Plain text
#: ../dgit.1:987
msgid ""
"With format `3.0 (quilt)', assume that the tree is patches-applied (as "
"obtained from dgit clone), and I<assume> that the patch metadata is up to "
"date.  If you use this option and the patch metadata is out of date, dgit "
"push will fail."
msgstr ""

#. type: TP
#: ../dgit.1:987
#, no-wrap
msgid "B<-->[B<quilt=>]B<gbp> | B<-->[B<quilt=>]B<dpm> | B<--quilt=unapplied> | B<-->[B<quilt=>]B<baredebian>[B<+git>|B<+tarball>]"
msgstr ""

#. type: Plain text
#: ../dgit.1:994
msgid ""
"Tell dgit that you are using a nearly-dgit-compatible git branch, aka a "
"B<maintainer view>, and do not want your branch changed by dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:998
msgid ""
"These quilt modes are known as B<splitting quilt modes>.  See --split-view, "
"below."
msgstr ""

#. type: Plain text
#: ../dgit.1:1006
msgid ""
"B<--gbp> (short for B<--quilt=gbp>)  is for use with git-buildpackage.  Your "
"HEAD is expected to be a patches-unapplied git branch, except that it might "
"contain changes to upstream .gitignore files.  This is the default for dgit "
"gbp-build."
msgstr ""

#. type: Plain text
#: ../dgit.1:1014
msgid ""
"B<--dpm> (short for B<--quilt=dpm>)  is for use with git-dpm.  Your HEAD is "
"expected to be a patches-applied git branch, except that it might contain "
"changes to upstream .gitignore files."
msgstr ""

#. type: Plain text
#: ../dgit.1:1019
msgid ""
"B<--quilt=unapplied> specifies that your HEAD is a patches-unapplied git "
"branch (and that any changes to upstream .gitignore files are represented as "
"patches in debian/patches)."
msgstr ""

#. type: Plain text
#: ../dgit.1:1033
msgid ""
"B<--quilt=baredebian> (or its alias B<--quilt=baredebian+git>)  specifies "
"that your HEAD contains only a debian/ directory, with any changes to "
"upstream files represented as patches in debian/patches.  The upstream "
"source must be available in git, by default, in a suitably named git tag; "
"see --upstream-commitish.  In this mode, dgit cannot check that all edited "
"upstream files are properly represented as patches: dgit relies on debian/"
"patches being correct."
msgstr ""

#. type: Plain text
#: ../dgit.1:1044
msgid ""
"B<--quilt=baredebian+tarball> is like --quilt=baredebian, but is used when "
"there is no appropriate upstream git history.  To construct the dgit view, "
"dgit will import your orig tarballs' contents into git.  In this mode, dgit "
"cannot check that the upstream parts of your upload correspond to what you "
"intend: dgit relies on the right orig tarball(s) existing, and debian/"
"patches being correct."
msgstr ""

#. type: Plain text
#: ../dgit.1:1062
msgid ""
"With --quilt=gbp|dpm|unapplied|baredebian*, dgit push (or precursors like "
"quilt-fixup and build) will automatically generate a conversion of your git "
"branch into the right form.  dgit push will push the dgit-compatible form "
"(the B<dgit view>)  to the dgit git server.  The dgit view will be visible "
"to you in the dgit remote tracking branches, but your own branch will not be "
"modified.  dgit push will create a tag B<debian/>I<version> for the "
"maintainer view, and the dgit tag B<archive/debian/>I<version> for the dgit "
"view.  dgit quilt-fixup will merely do some checks, and cache the maintainer "
"view."
msgstr ""

#. type: Plain text
#: ../dgit.1:1071
msgid ""
"B<If you have a branch like this it is essential to specify the appropriate "
"--quilt= option!> This is because it is not always possible to tell: a "
"patches-unapplied git branch of a package with one patch, for example, looks "
"very like a patches-applied branch where the user has used git revert to "
"undo the patch, expecting to actually revert it.  However, if you fail to "
"specify the right --quilt option, and you aren't too lucky, dgit will notice "
"the problem and stop, with a useful hint."
msgstr ""

#. type: TP
#: ../dgit.1:1071
#, no-wrap
msgid "B<-d>I<distro> | B<--distro=>I<distro>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1080
msgid ""
"Specifies that the suite to be operated on is part of distro I<distro>.  "
"This overrides the default value found from the git config option B<dgit-"
"suite.>I<suite>B<.distro>.  The only effect is that other configuration "
"variables (used for accessing the archive and dgit-repos) used are B<dgit-"
"distro.>I<distro>B<.*>."
msgstr ""

#. type: Plain text
#: ../dgit.1:1086
msgid ""
"If your suite is part of a distro that dgit already knows about, you can use "
"this option to make dgit work even if your dgit doesn't know about the "
"suite.  For example, specifying B<-ddebian> will work when the suite is an "
"unknown suite in the Debian archive."
msgstr ""

#. type: Plain text
#: ../dgit.1:1091
msgid ""
"To define a new distro it is necessary to define methods and URLs for "
"fetching (and, for dgit push, altering) a variety of information both in the "
"archive and in dgit-repos.  How to set this up is not yet documented."
msgstr ""

#. type: TP
#: ../dgit.1:1091
#, no-wrap
msgid "B<--split-view=auto>|B<always>|B<never>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1096
msgid ""
"Controls whether dgit operates a split view, separating your own branch (as "
"Debian maintainer)  from that shown to users of dgit clone and dgit fetch."
msgstr ""

#. type: Plain text
#: ../dgit.1:1104
msgid ""
"When split view is in operation dgit will not make or merge any commits onto "
"your own branch.  Specifically, only the dgit view will contain dgit's "
"pseudomerges, which bring into the git history previous uploads made with "
"dgit push, and any commits in debian/patches required to make a correct `3.0 "
"(quilt)' source package."
msgstr ""

#. type: Plain text
#: ../dgit.1:1110
msgid ""
"B<auto> is the default, and splits the view only when needed: i.e., when you "
"are working with a `3.0 (quilt)' source package and a splitting quilt mode: "
"--[quilt=]gbp, dpm, unpatched or baredebian*."
msgstr ""

#. type: Plain text
#: ../dgit.1:1113
msgid ""
"B<always> splits the view regardless of the source format and the quilt mode."
msgstr ""

#. type: Plain text
#: ../dgit.1:1116
msgid "B<never> will cause dgit to fail if split view is needed."
msgstr ""

#. type: Plain text
#: ../dgit.1:1124
msgid ""
"When split view is in operation, the dgit view is visible in your local git "
"clone, but only in refs specific to dgit: notably B<remotes/dgit/dgit/"
">I<suite> and B<archive/>I<distro>B</>I<version>."
msgstr ""

#. type: Plain text
#: ../dgit.1:1127
msgid ""
"Note that split view does not affect dgit fetch, and is not compatible with "
"dgit pull."
msgstr ""

#. type: TP
#: ../dgit.1:1127
#, no-wrap
msgid "B<-C>I<changesfile>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1132
msgid ""
"Specifies the .changes file which is to be uploaded.  By default dgit push "
"looks for a single .changes file in the parent directory whose filename "
"suggests it is for the right package and version."
msgstr ""

#. type: Plain text
#: ../dgit.1:1141
msgid ""
"If the specified I<changesfile> pathname contains slashes, the directory "
"part is also used as the value for B<--build-products-dir>; otherwise, the "
"changes file is expected in that directory (by default, in B<..>)."
msgstr ""

#. type: TP
#: ../dgit.1:1141
#, no-wrap
msgid "B<--upstream-commitish=>I<upstream>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1149
msgid ""
"For use with --quilt=baredebian only.  Specifies the commit containing the "
"upstream source.  This commit must be identical to your .orig tarball.  The "
"default is to look for one of the git tags I<U>B< v>I<U>B< upstream/>I<U> "
"(in that order), where U is the upstream version."
msgstr ""

#. type: TP
#: ../dgit.1:1149
#, no-wrap
msgid "B<--rm-old-changes>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1161
msgid ""
"When doing a build, delete any changes files matching "
"I<package>B<_>I<version>B<_*.changes> before starting.  This ensures that "
"dgit push (and dgit sbuild) will be able to unambiguously identify the "
"relevant changes files from the most recent build, even if there have been "
"previous builds with different tools or options.  The default is not to "
"remove, but B<--no-rm-old-changes> can be used to override a previous --rm-"
"old-changes or the .rm-old-changes configuration setting."
msgstr ""

#. type: Plain text
#: ../dgit.1:1164
msgid ""
"Note that B<dgit push-source> will always find the right .changes, "
"regardless of this option."
msgstr ""

#. type: TP
#: ../dgit.1:1164
#, no-wrap
msgid "B<--build-products-dir=>I<directory>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1168
msgid ""
"Specifies where to find and create tarballs, binary packages, source "
"packages, .changes files, and so on."
msgstr ""

#. type: Plain text
#: ../dgit.1:1171
msgid "By default, dgit uses the parent directory (B<..>)."
msgstr ""

#. type: Plain text
#: ../dgit.1:1180
msgid ""
"Changing this setting may necessitate moving .orig tarballs to the new "
"directory, so it is probably best to use the B<dgit.default.build-products-"
"dir> configuration setting (see CONFIGURATION, below)  which this command "
"line option overrides)."
msgstr ""

#. type: TP
#: ../dgit.1:1180
#, no-wrap
msgid "B<--no-rm-on-error>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1183
msgid "Do not delete the destination directory if clone fails."
msgstr ""

#. type: TP
#: ../dgit.1:1183
#, no-wrap
msgid "B<--dep14tag> | B<--no-dep14tag>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1189
msgid ""
"Whether to push a DEP-14 tag (eg B<debian/>I<version>)  as well as a dgit "
"tag (eg B<archive/debian/>I<version>)."
msgstr ""

#. type: Plain text
#: ../dgit.1:1192
msgid ""
"Pushing a DEP-14 tag is the default.  In split view mode, a DEP-14 tag is "
"always pushed, regardless of this option."
msgstr ""

#. type: Plain text
#: ../dgit.1:1195
msgid ""
"B<--always-dep14tag> is an obsolete alias for --dep14tag, retained for "
"compatibility."
msgstr ""

#. type: TP
#: ../dgit.1:1195
#, no-wrap
msgid "B<--dep14tag-reuse=must>|B<if-exists>|B<replace-unsuitable>|B<replace>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1199
msgid ""
"Whether to use an existing DEP-14 tag, or make a fresh one.  Ignored if no "
"DEP-14 tag is to be pushed."
msgstr ""

#. type: TP
#: ../dgit.1:1200
#, no-wrap
msgid "B<--dep14tag-reuse=must>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1204
msgid ""
"Push an existing tag DEP-14 tag.  If there is no existing tag, or the "
"existing tag is unsuitable, fail."
msgstr ""

#. type: TP
#: ../dgit.1:1204
#, no-wrap
msgid "B<--dep14tag-reuse=if-exists>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1209
msgid ""
"Push an existing tag DEP-14 tag, if it exists.  If there is no existing tag, "
"make one.  If there is an existing tag but it is unsuitable, fail."
msgstr ""

#. type: Plain text
#: ../dgit.1:1211
msgid "This is the default."
msgstr ""

#. type: TP
#: ../dgit.1:1211
#, no-wrap
msgid "B<--dep14tag-reuse=replace-unsuitable>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1216
msgid ""
"Push an existing tag DEP-14 tag, if it exists and is suitable.  If there is "
"no existing tag, or it's unsuitable, make a fresh tag, overwriting the "
"corresponding git ref, and thus deleting any old tag."
msgstr ""

#. type: TP
#: ../dgit.1:1216
#, no-wrap
msgid "B<--dep14tag-reuse=replace>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1220
msgid ""
"Always make a fresh DEP-14 tag, overwriting the corresponding git ref, and "
"thus deleting any old tag."
msgstr ""

#. type: Plain text
#: ../dgit.1:1222
msgid "This was the default in dgit 11 and earlier."
msgstr ""

#. type: TP
#: ../dgit.1:1223
#, no-wrap
msgid "B<--dep14tag-verify> | B<--no-dep14tag-verify>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1227
msgid ""
"Whether to verify an existing DEP-14 tag, as part of the suitability check."
msgstr ""

#. type: Plain text
#: ../dgit.1:1230
msgid ""
"The default is to consider an unsigned tag suitable (and not verify a signed "
"one)."
msgstr ""

#. type: Plain text
#: ../dgit.1:1236
msgid ""
"Note that any DEP-14 tag being pushed will be, effectively, countersigned: "
"the hash of the DEP-14 tag object (if there is one)  is part of the metadata "
"in the dgit view B<archive/> tag message."
msgstr ""

#. type: TP
#: ../dgit.1:1236
#, no-wrap
msgid "B<-D>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1240
msgid ""
"Prints debugging information to stderr.  Repeating the option produces more "
"output (currently, up to -DDDD is meaningfully different)."
msgstr ""

#. type: TP
#: ../dgit.1:1240
#, no-wrap
msgid "B<--keep-playground>|B<--no--keep-playground>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1249
msgid ""
"Controls whether to retain the \"playground\" working directory B<.git/dgit/"
"unpack> even on success, for examination and debugging.  The default is B<--"
"no-keep-playground> which deletes the directory after a successful execution."
msgstr ""

#. type: TP
#: ../dgit.1:1249
#, no-wrap
msgid "B<-c>I<name>B<=>I<value>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1253
msgid ""
"Specifies a git configuration option, to be used for this run.  dgit itself "
"is also controlled by git configuration options."
msgstr ""

#. type: TP
#: ../dgit.1:1253
#, no-wrap
msgid "B<-v>I<version>|B<_> | B<--since-version=>versionI<|>B<_>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1262
msgid ""
"Specifies the B<-v>I<version> option to pass to dpkg-genchanges, during "
"builds.  Changes (from debian/changelog) since this version will be included "
"in the built changes file, and hence in the upload.  If this option is not "
"specified, dgit will query the archive and use the latest version uploaded "
"to the intended suite."
msgstr ""

#. type: Plain text
#: ../dgit.1:1268
msgid ""
"Specifying B<_> inhibits this, so that no -v option will be passed to dpkg-"
"genchanges (and as a result, only the last stanza from debian/changelog will "
"be used for the build and upload)."
msgstr ""

#. type: TP
#: ../dgit.1:1268
#, no-wrap
msgid "B<-m>I<maintaineraddress>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1271
msgid "Passed to dpkg-genchanges (eventually)."
msgstr ""

#. type: TP
#: ../dgit.1:1271
#, no-wrap
msgid "B<--ch:>I<option>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1275
msgid ""
"Specifies a single additional option to pass, eventually, to dpkg-genchanges."
msgstr ""

#. type: Plain text
#: ../dgit.1:1282
msgid ""
"Options which are safe to pass include B<-C> (and also B<-si -sa -sd> "
"although these should never be necessary with Debian since dgit "
"automatically calculates whether .origs need to be uploaded.)"
msgstr ""

#. type: Plain text
#: ../dgit.1:1284
msgid "For other options the caveat below applies."
msgstr ""

#. type: TP
#: ../dgit.1:1284
#, no-wrap
msgid "B<--curl:>I<option> | B<--dput:>I<option> |..."
msgstr ""

#. type: Plain text
#: ../dgit.1:1306
msgid ""
"Specifies a single additional option to pass to B<curl>, B<dput>, "
"B<debsign>, B<dpkg-source>, B<dpkg-buildpackage>, B<dpkg-genchanges>, "
"B<sbuild>, B<pbuilder>, B<cowbuilder>, B<ssh>, B<dgit>, B<git-debrebase>, "
"B<apt-get>, B<apt-cache>, B<gbp-pq>, B<gbp-build>, or B<mergechanges>.  Can "
"be repeated as necessary."
msgstr ""

#. type: Plain text
#: ../dgit.1:1314
msgid ""
"Use of this ability should not normally be necessary.  It is provided for "
"working around bugs, or other unusual situations.  If you use these options, "
"you may violate dgit's assumptions about the behaviour of its subprograms "
"and cause lossage."
msgstr ""

#. type: Plain text
#: ../dgit.1:1319
msgid ""
"For dpkg-buildpackage, dpkg-genchanges, mergechanges and sbuild, the option "
"applies only when the program is invoked directly by dgit.  Usually, for "
"passing options to dpkg-genchanges, you should use B<--ch:>I<option>."
msgstr ""

#. type: Plain text
#: ../dgit.1:1323
msgid ""
"Specifying --git is not effective for some lower-level read-only git "
"operations performed by dgit, and also not when git is invoked by another "
"program run by dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:1325
msgid "See notes below regarding ssh and dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:1333
msgid ""
"NB that --gpg:option is not supported (because debsign does not have that "
"facility).  But see B<-k> and the B<keyid> distro config setting."
msgstr ""

#. type: TP
#: ../dgit.1:1333
#, no-wrap
msgid "B<--curl!:>I<option> | B<--dput!:>I<option> |..."
msgstr ""

#. type: Plain text
#: ../dgit.1:1339
msgid ""
"Specifies an option to remove from the command line for a program called by "
"dgit, as for B<-->I<program>B<:>I<option> (and the same caveats apply)."
msgstr ""

#. type: Plain text
#: ../dgit.1:1344
msgid ""
"Any options or arguments exactly identical to I<option> are removed.  (It is "
"not an error if there were none.)"
msgstr ""

#. type: Plain text
#: ../dgit.1:1351
msgid ""
"This can only be used to delete options which are always passed by default "
"by dgit, or to undo a previous B<-->I<program>B<:>I<option>.  It cannot be "
"used to override option(s) dynamically decided on by dgit."
msgstr ""

#. type: TP
#: ../dgit.1:1351
#, no-wrap
msgid "B<--curl=>I<program> | B<--dput=>I<program> |..."
msgstr ""

#. type: Plain text
#: ../dgit.1:1376
msgid ""
"Specifies alternative programs to use instead of B<curl>, B<dput>, "
"B<debsign>, B<dpkg-source>, B<dpkg-buildpackage>, B<dpkg-genbuildinfo>, "
"B<dpkg-genchanges>, B<dpkg-query>, B<sbuild>, B<pbuilder>, B<cowbuilder>, "
"B<gpg>, B<ssh>, B<dgit>, B<git-debrebase>, B<apt-get>, B<apt-cache>, B<git>, "
"B<gbp-pq>, B<gbp-build>, or B<mergechanges>."
msgstr ""

#. type: Plain text
#: ../dgit.1:1386
msgid ""
"For B<dpkg-buildpackage>, B<dpkg-genbuildinfo>, B<dpkg-genchanges>, B<dpkg-"
"query>, B<mergechanges> and B<sbuild>, this applies only when the program is "
"invoked directly by dgit."
msgstr ""

#. type: Plain text
#: ../dgit.1:1393
msgid ""
"For B<dgit>, specifies the command to run on the remote host when dgit rpush "
"needs to invoke a remote copy of itself.  (dgit also reinvokes itself as the "
"EDITOR for dpkg-source --commit; this is done using argv[0], and is not "
"affected by --dgit=)."
msgstr ""

#. type: Plain text
#: ../dgit.1:1404
msgid ""
"B<gbp-build>'s value is used instead of gbp build or git-buildpackage.  (The "
"default is the latter unless the former exists on PATH.)  B<gbp-pq>'s value "
"is used instead of gbp pq.  In both cases, unusually, the specified value is "
"split on whitespace to produce a command and possibly some options and/or "
"arguments."
msgstr ""

#. type: Plain text
#: ../dgit.1:1412
msgid ""
"For pbuilder and cowbuilder, the defaults are B<sudo -E pbuilder> and B<sudo "
"-E cowbuilder> respectively.  Like with gbp-build and gbp pq, the specified "
"value is split on whitespace."
msgstr ""

#. type: Plain text
#: ../dgit.1:1429
msgid ""
"For B<ssh>, the default value is taken from the B<DGIT_SSH> or B<GIT_SSH> "
"environment variables, if set (see below).  And, for ssh, when accessing the "
"archive and dgit-repos, this command line setting is overridden by the git "
"config variables B<dgit-distro.>I<distro>B<.ssh> and B<.dgit.default.ssh> "
"(which can in turn be overridden with -c).  Also, when dgit is using git to "
"access dgit-repos, only git's idea of what ssh to use (eg, B<GIT_SSH>)  is "
"relevant."
msgstr ""

#. type: TP
#: ../dgit.1:1429
#, no-wrap
msgid "B<--existing-package=>I<package>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1439
msgid ""
"dgit push needs to canonicalise the suite name.  Sometimes, dgit lacks a way "
"to ask the archive to do this without knowing the name of an existing "
"package.  Without --new we can just use the package we are trying to push.  "
"But with --new that will not work, so we guess B<dpkg> or use the value of "
"this option.  This option is not needed with the default mechanisms for "
"accessing the archive."
msgstr ""

#. type: TP
#: ../dgit.1:1439
#, no-wrap
msgid "B<-h>|B<--help>"
msgstr ""

#. type: TP
#: ../dgit.1:1442
#, no-wrap
msgid "B<--initiator-tempdir=>I<directory>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1451
msgid ""
"dgit rpush uses a temporary directory on the invoking (signing) host.  This "
"option causes dgit to use I<directory> instead.  Furthermore, the specified "
"directory will be emptied, removed and recreated before dgit starts, rather "
"than removed after dgit finishes.  The directory specified must be an "
"absolute pathname."
msgstr ""

#. type: TP
#: ../dgit.1:1451
#, no-wrap
msgid "B<--dry-run> | B<-n>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1458
msgid ""
"Go through the motions, fetching all information needed, but do not actually "
"update the output(s).  For push, dgit does the required checks and leaves "
"the new .dsc and .changes in temporary files, but does not sign, tag, push "
"or upload."
msgstr ""

#. type: Plain text
#: ../dgit.1:1461
msgid ""
"This is not a very good simulation.  It can easily go wrong in ways that a "
"for-real push wouldn't."
msgstr ""

#. type: TP
#: ../dgit.1:1461
#, no-wrap
msgid "B<--damp-run> | B<-L>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1466
msgid ""
"Go through many more of the motions: do everything that doesn't involve "
"either signing things, or making changes on the public servers."
msgstr ""

#. type: Plain text
#: ../dgit.1:1471
msgid ""
"Using this will make unsigned tags, and possibly other local changes, that "
"will get in the way of a for-real push.  So be prepared to burn the version "
"number you're using."
msgstr ""

#. type: TP
#: ../dgit.1:1471
#, no-wrap
msgid "B<--force->I<something>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1479
msgid ""
"Instructs dgit to try to proceed despite detecting what it thinks is going "
"to be a fatal problem.  B<This is probably not going to work.> These options "
"are provided as an escape hatch, in case dgit is confused.  (They might also "
"be useful for testing error cases.)"
msgstr ""

#. type: TP
#: ../dgit.1:1479
#, no-wrap
msgid "B<--force-import-dsc-with-dgit-field>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1486
msgid ""
"Tell dgit import-dsc to treat a .dsc with a Dgit field like one without it.  "
"The result is a fresh import, discarding the git history that the person who "
"pushed that .dsc was working with."
msgstr ""

#. type: TP
#: ../dgit.1:1486
#, no-wrap
msgid "B<--force-reusing-version>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1493
msgid ""
"Carry on even though this involves reusing a version number of a previous "
"push or upload.  It is normally best to give different versions different "
"numbers.  Some servers (including, usually, the Debian server)  will reject "
"attempts to reuse or replace already-pushed versions."
msgstr ""

#. type: TP
#: ../dgit.1:1493
#, no-wrap
msgid "B<--force-uploading-binaries>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1498
msgid ""
"Carry on and upload binaries even though dgit thinks your distro does not "
"permit that."
msgstr ""

#. type: TP
#: ../dgit.1:1498
#, no-wrap
msgid "B<--force-uploading-source-only>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1504
msgid ""
"Carry on and do a source-only upload, without any binaries, even though dgit "
"thinks your distro does not permit that, or does not permit that in this "
"situation."
msgstr ""

#. type: TP
#: ../dgit.1:1504
#, no-wrap
msgid "B<--force-unrepresentable>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1511
msgid ""
"Carry on even if dgit thinks that your git tree contains changes (relative "
"to your .orig tarballs)  which dpkg-source is not able to represent.  Your "
"build or push will probably fail later."
msgstr ""

#. type: TP
#: ../dgit.1:1511
#, no-wrap
msgid "B<--force-changes-origs-exactly>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1516
msgid ""
"Use the set of .origs specified in your .changes, exactly, without regard to "
"what is in the archive already.  The archive may well reject your upload."
msgstr ""

#. type: TP
#: ../dgit.1:1516
#, no-wrap
msgid "B<--force-unsupported-source-format>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1520
msgid ""
"Carry on despite dgit not understanding your source package format.  dgit "
"will probably mishandle it."
msgstr ""

#. type: TP
#: ../dgit.1:1520
#, no-wrap
msgid "B<--force-dsc-changes-mismatch>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1524
msgid ""
"Do not check whether .dsc and .changes match.  The archive will probably "
"reject your upload."
msgstr ""

#. type: TP
#: ../dgit.1:1524
#, no-wrap
msgid "B<--force-import-gitapply-absurd> | B<--force-import-gitapply-no-absurd>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1530
msgid ""
"Force on or off the use of the absurd git-apply emulation when running gbp "
"pq import when importing a package from a .dsc.  See Debian bug #841867."
msgstr ""

#. type: TP
#: ../dgit.1:1530
#, no-wrap
msgid "B<--force-push-tainted>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1540
msgid ""
"Go ahead and try to push even tainted git objects hat the server says it is "
"going to reject, but without declaring any --deliberately.  This option is "
"provided for testing or strange situations, and is not the way to override "
"the taint check: using it will probably just fail later, burning the version "
"number you are using.  Use the appropriate --deliberately option instead."
msgstr ""

#. type: TP
#: ../dgit.1:1540
#, no-wrap
msgid "B<--for-push>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1546
msgid ""
"Override the dgit-distro.distro.readonly configuration setting, to specify "
"that we have read/write access and should use the corresponding git and "
"achieve access approach even if the operation is a read-only one."
msgstr ""

#. type: TP
#: ../dgit.1:1546
#, no-wrap
msgid "B<--expect-suite>=I<suite>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1551
msgid ""
"Specifies that the dgit rpush invoking host should be willing to sign only "
"a .dsc or .changes file with target suite I<suite>."
msgstr ""

#. type: TP
#: ../dgit.1:1551
#, no-wrap
msgid "B<--expect-version>=I<version>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1556
msgid ""
"Specifies that the dgit rpush invoking host should be willing to sign only "
"a .dsc or .changes file with version I<version>."
msgstr ""

#. type: TP
#: ../dgit.1:1556
#, no-wrap
msgid "B<--tag2upload-builder-mode>, B<--tag2upload-upstream=>I<TAG>, B<--tag2upload-upstream-commit=>I<COMMIT>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1562
msgid ""
"These options activate configuration and behavioural changes needed when the "
"tag2upload robot invokes dgit.  They are not intended for users."
msgstr ""

#. type: TP
#: ../dgit.1:1562
#, no-wrap
msgid "B<--allow-unrelated-histories>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1569
msgid ""
"Pass --allow-unrelated-histories to git merge command when running dgit "
"pull.  This makes dgit pull easier to use when the main repository has never "
"been used with dgit and hence has unrelated histories."
msgstr ""

#. type: TP
#: ../dgit.1:1569
#, no-wrap
msgid "B<--dsc-control-add=>I<FIELD>B<=>I<VALUE>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1572
msgid "Add an additional control file field to the .dsc."
msgstr ""

#. type: Plain text
#: ../dgit.1:1579
msgid ""
"This is similar to using B<--dpkg-source:-D>I<FIELD>B<=>I<VALUE> except that "
"(i) you can only add an additional field, not override a value; and (ii) for "
"an rpush, the field is added on the invoking (signing) host, not the build "
"host."
msgstr ""

#. type: TP
#: ../dgit.1:1579
#, no-wrap
msgid "B<--ch-control-add=>I<FIELD>B<=>I<VALUE>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1582
msgid "Like B<--dsc-control-add> but for adding fields to the .changes file."
msgstr ""

#. type: =head1
#: ../dgit.1:1582 ../dgit-downstream-dsc.7.pod:150
#, no-wrap
msgid "CONFIGURATION"
msgstr ""

#. type: Plain text
#: ../dgit.1:1588
msgid ""
"dgit can be configured via the git config system.  You may set keys with git-"
"config (either in system-global or per-tree configuration), or provide B<-"
"c>I<key>B<=>I<value> on the dgit command line."
msgstr ""

#. type: Plain text
#: ../dgit.1:1590
msgid "Settings likely to be useful for an end user include:"
msgstr ""

#. type: TP
#: ../dgit.1:1590
#, no-wrap
msgid "B<dgit.default.build-products-dir>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1596
msgid ""
"Specifies where to find the built files to be uploaded, when --build-"
"products-dir is not specified.  The default is the parent directory (B<..>)."
msgstr ""

#. type: =item
#: ../dgit.1:1596 ../dgit-downstream-dsc.7.pod:286
#, no-wrap
msgid "B<dgit-suite.>I<suite>B<.distro> I<distro>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1601
msgid ""
"Specifies the distro for a suite.  dgit keys off the suite name (which "
"appears in changelogs etc.), and uses that to determine the distro which is "
"involved.  The config used is thereafter that for the distro."
msgstr ""

#. type: Plain text
#: ../dgit.1:1604
msgid "I<suite> may be a glob pattern."
msgstr ""

#. type: TP
#: ../dgit.1:1604
#, no-wrap
msgid "B<dgit.default.distro>I< distro>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1607
msgid "The default distro for an unknown suite."
msgstr ""

#. type: Plain text
#: ../dgit.1:1611
msgid ""
"This is only used if no B</usr/share/distro-info/>I<somedistro>B<.csv> "
"mentions the specified suite."
msgstr ""

#. type: TP
#: ../dgit.1:1611
#, no-wrap
msgid "B<dgit.default.default-suite>I< suite>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1614
msgid "The default suite (eg for clone)."
msgstr ""

#. type: TP
#: ../dgit.1:1614
#, no-wrap
msgid "B<dgit.default.>*"
msgstr ""

#. type: Plain text
#: ../dgit.1:1619
msgid ""
"for each B<dgit-distro.>I<distro>B<.>*, the default value used if there is "
"no distro-specific setting."
msgstr ""

#. type: TP
#: ../dgit.1:1619
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.clean-mode>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1623
msgid ""
"One of the values for the command line --clean= option; used if --clean is "
"not specified."
msgstr ""

#. type: TP
#: ../dgit.1:1623
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.clean-mode-newer>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1629
msgid ""
"Like .clean-mode, but ignored if the value is unknown to this version of "
"dgit.  Setting both .clean-mode and .clean-mode-newer is useful to provide a "
"single git config compatible with different dgit versions."
msgstr ""

#. type: TP
#: ../dgit.1:1629
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.quilt-mode>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1633
msgid ""
"One of the values for the command line --quilt= option; used if --quilt is "
"not specified."
msgstr ""

#. type: TP
#: ../dgit.1:1633
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.split-view>"
msgstr ""

#. type: TP
#: ../dgit.1:1635
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.rm-old-changes>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1639
msgid ""
"Boolean, used if neither --rm-old-changes nor --no-rm-old-changes is "
"specified.  The default is not to remove."
msgstr ""

#. type: TP
#: ../dgit.1:1639
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.readonly> B<auto>|B<a> | B<true>|B<t>|B<y>|B<1> | B<false>|B<f>|B<n>|B<0>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1646
msgid ""
"Whether you have push access to the distro.  For Debian, it is OK to use "
"auto, which uses readonly mode if you are not pushing right now; but, "
"setting this to false will avoid relying on the mirror of the dgit git "
"repository server."
msgstr ""

#. type: TP
#: ../dgit.1:1646
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.keyid>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1650
msgid "See also B<-k>."
msgstr ""

#. type: TP
#: ../dgit.1:1650
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.mirror>I< url>"
msgstr ""

#. type: TP
#: ../dgit.1:1652
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.username>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1655
msgid "Not relevant for Debian."
msgstr ""

#. type: =item
#: ../dgit.1:1655 ../dgit-downstream-dsc.7.pod:242
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.upload-host>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1658
msgid "Might be useful if you have an intermediate queue server."
msgstr ""

#. type: TP
#: ../dgit.1:1658
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.user-name>I< >B<dgit-distro.>I<distro>B<.user-email>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1663
msgid ""
"Values to configure for user.name and user.email in new git trees.  If not "
"specified, the DEBFULLNAME and DEBEMAIL environment variables are used, "
"respectively.  Only used if .setup-usermail is not disabled."
msgstr ""

#. type: TP
#: ../dgit.1:1663
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.setup-useremail>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1667
msgid ""
"Whether to set user.name and user.email in new git trees.  True by default.  "
"Ignored for dgit setup-useremail, which does it anyway."
msgstr ""

#. type: TP
#: ../dgit.1:1667
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.setup-mergechangelogs>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1672
msgid ""
"Whether to set up a merge driver which uses dpkg-mergechangelogs for debian/"
"changelog.  True by default.  Ignored for dgit setup-mergechangelogs, which "
"does it anyway."
msgstr ""

#. type: TP
#: ../dgit.1:1672
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.setup-gitattributes>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1678
msgid ""
"Whether to configure .git/info/attributes to suppress checkin/checkout file "
"content transformations in new git trees.  True by default.  Ignored for "
"dgit setup-gitattributes, which does it anyway."
msgstr ""

#. type: TP
#: ../dgit.1:1678
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.cmd->I<cmd>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1684
msgid "Program to use instead of I<cmd>.  Works like B<-->I<cmd>B<=>... ."
msgstr ""

#. type: TP
#: ../dgit.1:1684
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.opts->I<cmd>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1696
msgid ""
"Extra options to pass to I<cmd>.  Works like B<-->I<cmd>B<:>... .  To pass "
"several options, configure multiple values in git config (with git config --"
"add).  The options for B<dgit.default.opts->I<cmd> and B<dgit-"
"distro.>I<distro>B</push.opts->I<cmd> are all used, followed by options from "
"dgit's command line."
msgstr ""

#. type: SH
#: ../dgit.1:1696
#, no-wrap
msgid "ACCESS CONFIGURATION"
msgstr ""

#. type: Plain text
#: ../dgit.1:1701
msgid ""
"There are many other settings which specify how a particular distro's "
"services (archive and git) are provided.  These should not normally be "
"adjusted, but are documented for the benefit of distros who wish to adopt "
"dgit."
msgstr ""

#. type: TP
#: ../dgit.1:1701
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.nominal-distro>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1704
msgid "Shown in git tags, Dgit fields, and so on."
msgstr ""

#. type: TP
#: ../dgit.1:1704
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.alias-canon>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1707
msgid "Used for all access configuration lookup."
msgstr ""

#. type: TP
#: ../dgit.1:1707
#, no-wrap
msgid "B<dgit-distro.>I<distro>B</push.>*"
msgstr ""

#. type: Plain text
#: ../dgit.1:1713
msgid ""
"If set, overrides corresponding non B</push> config when B<readonly=false>, "
"or when pushing and B<readonly=auto>."
msgstr ""

#. type: TP
#: ../dgit.1:1713
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.git-url>"
msgstr ""

#. type: TP
#: ../dgit.1:1715
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.git-url>[B<-suffix>]"
msgstr ""

#. type: TP
#: ../dgit.1:1717
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.git-proto>"
msgstr ""

#. type: TP
#: ../dgit.1:1719
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.git-path>"
msgstr ""

#. type: TP
#: ../dgit.1:1721
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.git-check> B<true>|B<false>|B<url>|B<ssh-cmd>"
msgstr ""

#. type: TP
#: ../dgit.1:1723
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.git-check-suffix>"
msgstr ""

#. type: TP
#: ../dgit.1:1725
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.policy-query-supported-ssh>I< >B<false>I<|>B<unknown>I<|>B<true>"
msgstr ""

#. type: TP
#: ../dgit.1:1727
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.diverts.divert> B<new-distro>|B</>I<distro-suffix>"
msgstr ""

#. type: TP
#: ../dgit.1:1729
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.git-create>I< >B<ssh-cmd>I<|>B<true>"
msgstr ""

#. type: TP
#: ../dgit.1:1731
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.archive-query> B<ftpmasterapi:> | B<madison:>I<distro> | B<dummycat:>I</path>  | B<sshpsql:>I<user>B<@>I<host>B<:>I<dbname>B< >|B< aptget:>"
msgstr ""

#. type: TP
#: ../dgit.1:1733
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.archive-query->(B<url>|B<tls-key>|B<curl-ca-args>)"
msgstr ""

#. type: TP
#: ../dgit.1:1735
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.madison-distro>"
msgstr ""

#. type: TP
#: ../dgit.1:1737
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.archive-query-default-component>"
msgstr ""

#. type: TP
#: ../dgit.1:1739
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.dep14tag> B<want>|B<no>[|B<always>]"
msgstr ""

#. type: TP
#: ../dgit.1:1741
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.dep14tag-reuse> B<must>|B<if-exists>|B<replace-unsuitable>|B<replace>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1744
msgid "B<dgit-distro.>I<distro>B<.dep14tag-verify> B<true>|B<false>"
msgstr ""

#. type: TP
#: ../dgit.1:1744
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.ssh>"
msgstr ""

#. type: TP
#: ../dgit.1:1746
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.sshpsql-dbname>"
msgstr ""

#. type: TP
#: ../dgit.1:1748
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.>(B<git>|B<sshpsql>)B<->(B<user>|B<host>|B<user-force>)"
msgstr ""

#. type: TP
#: ../dgit.1:1750
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.backports-quirk>"
msgstr ""

#. type: TP
#: ../dgit.1:1752
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.rewrite-map-enable>"
msgstr ""

#. type: TP
#: ../dgit.1:1754
#, no-wrap
msgid "B<dgit-distro.>I<distro>B<.source-only-uploads> B<ok>|B<always>|B<never>|B<not-wholly-new>"
msgstr ""

#. type: TP
#: ../dgit.1:1756
#, no-wrap
msgid "B<dgit.default.old-dsc-distro>"
msgstr ""

#. type: TP
#: ../dgit.1:1758
#, no-wrap
msgid "B<dgit.dsc-url-proto-ok.>I<protocol>"
msgstr ""

#. type: TP
#: ../dgit.1:1760
#, no-wrap
msgid "B<dgit.dsc-url-proto-ok.bad-syntax>"
msgstr ""

#. type: TP
#: ../dgit.1:1762
#, no-wrap
msgid "B<dgit.default.dsc-url-proto-ok>"
msgstr ""

#. type: TP
#: ../dgit.1:1764
#, no-wrap
msgid "B<dgit.default.push-subcmd>I< >B<source>I<|>B<built>I<|>B<warn,built>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1768
msgid "Controls the behaviour of B<dgit push>."
msgstr ""

#. type: TP
#: ../dgit.1:1768
#, no-wrap
msgid "B<dgit.vcs-git.suites> I<suite>[B<;>...]"
msgstr ""

#. type: SH
#: ../dgit.1:1770
#, no-wrap
msgid "ENVIRONMENT VARIABLES"
msgstr ""

#. type: TP
#: ../dgit.1:1771
#, no-wrap
msgid "B<DGIT_SSH>, B<GIT_SSH>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1780
msgid ""
"specify an alternative default program (and perhaps arguments) to use "
"instead of ssh.  DGIT_SSH is consulted first and may contain arguments; if "
"it contains any whitespace will be passed to the shell.  GIT_SSH specifies "
"just the program; no arguments can be specified, so dgit interprets it the "
"same way as git does.  See also the --ssh= and --ssh: options."
msgstr ""

#. type: TP
#: ../dgit.1:1780
#, no-wrap
msgid "B<DEBEMAIL>, B<DEBFULLNAME>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1784
msgid ""
"Default git user.email and user.name for new trees.  See B<dgit setup-new-"
"tree>."
msgstr ""

#. type: TP
#: ../dgit.1:1784
#, no-wrap
msgid "B<gpg>, B<dpkg->..., B<debsign>, B<git>, [B<lib>]B<curl>, B<dput>"
msgstr ""

#. type: Plain text
#: ../dgit.1:1789
msgid ""
"and other subprograms and modules used by dgit are affected by various "
"environment variables.  Consult the documentation for those programs for "
"details."
msgstr ""

#. type: SH
#: ../dgit.1:1789
#, no-wrap
msgid "SUPPORT ON OLD DISTRIBUTIONS"
msgstr ""

#. type: Plain text
#: ../dgit.1:1795
msgid ""
"We aim to make modern dgit installable and useable on old versions of "
"Debian, and on derivatives.  One reason this is helpful is that it can be "
"necessary to upgrade to handle strange source packages that trigger bugs (in "
"dgit or tools that dgit runs)."
msgstr ""

#. type: Plain text
#: ../dgit.1:1803
msgid ""
"This version of B<dgit.deb> is directly installable, and functional (with "
"B<apt install dgit.deb>)  all the way back to Debian 10 (buster) and later; "
"this is tested in our CI.  It is likely to work on many Debian derivatives, "
"too."
msgstr ""

#. type: SH
#: ../dgit.1:1803
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: ../dgit.1:1810
msgid ""
"There should be a `dgit rebase-prep' command or some such to turn a fast-"
"forwarding branch containing pseudo-merges back into a rebasing patch "
"stack.  It might have to leave a note for a future dgit push."
msgstr ""

#. type: Plain text
#: ../dgit.1:1816
msgid ""
"If the dgit push fails halfway through, it is not necessarily restartable "
"and idempotent.  It would be good to check that the proposed signing key is "
"available before starting work."
msgstr ""

#. type: Plain text
#: ../dgit.1:1821
msgid ""
"dgit's build functions, and dgit push, may make changes to your current "
"HEAD.  Sadly this is necessary for packages in the `3.0 (quilt)' source "
"format.  This is ultimately due to what I consider design problems in quilt "
"and dpkg-source."
msgstr ""

#. type: Plain text
#: ../dgit.1:1826
msgid ""
"--dry-run does not always work properly, as not doing some of the git "
"fetches may result in subsequent actions being different.  Doing a non-dry-"
"run dgit fetch first will help.  --damp-run is likely to work much better."
msgstr ""

#. type: =head1
#: ../dgit.1:1826 ../dgit.7:23 ../dgit-user.7.pod:463
#: ../dgit-nmu-simple.7.pod:137 ../dgit-maint-native.7.pod:125
#: ../dgit-maint-merge.7.pod:509 ../dgit-maint-gbp.7.pod:139
#: ../dgit-maint-debrebase.7.pod:792 ../dgit-downstream-dsc.7.pod:352
#: ../dgit-sponsorship.7.pod:326 ../dgit-maint-bpo.7.pod:140
#: ../git-debrebase.1.pod:629 ../git-debrebase.5.pod:677
#: ../git-debpush.1.pod:272 ../tag2upload.5.pod:224
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: ../dgit.1:1835
msgid ""
"B<dgit>(7), B<dgit-*>(7), B<curl>(1), B<dput>(1), B<debsign>(1), B<git-"
"config>(1), B<git-buildpackage>(1), B<dpkg-buildpackage>(1),"
msgstr ""

#. type: Plain text
#: ../dgit.1:1836
msgid "https://browse.dgit.debian.org/"
msgstr ""
